server.port=5000
spring.datasource.url=${POSTGRESQL_URL}
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=${POSTGRESQL_USERNAME}
spring.datasource.password=${POSTGRESQL_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

spring.security.oauth2.client.registration.linkedin.client-id=${LINKEDIN_CI}
spring.security.oauth2.client.registration.linkedin.client-secret=${LINKEDIN_CS}
spring.security.oauth2.client.registration.linkedin.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.scope=r_emailaddress, r_liteprofile
spring.security.oauth2.client.registration.linkedin.client-name=Linkedin

spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id

spring.mail.host=smtp.zoho.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

spring.main.allow-circular-references=true
spring.main.allow-bean-definition-overriding=true

# metrics-start
management.endpoint.info.enabled=true
management.endpoints.web.exposure.include=prometheus
#metrics-end

