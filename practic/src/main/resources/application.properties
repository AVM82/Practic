server.port=5000

refreshDB_on_start=false

#spring.datasource.url=jdbc:postgresql://localhost:5432/practic
#spring.datasource.username=postgres
#spring.datasource.password=postgres
#spring.jpa.generate-ddl=true

spring.datasource.url=${POSTGRESQL_URL}
spring.datasource.username=${POSTGRESQL_USERNAME}
spring.datasource.password=${POSTGRESQL_PASSWORD}

spring.jpa.show-sql=true
spring.datasource.driverClassName=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
spring.jpa.defer-datasource-initialization=true
application-version=@project.version@
spring.security.oauth2.client.registration.linkedin.client-id=${LINKEDIN_CI}
spring.security.oauth2.client.registration.linkedin.client-secret=${LINKEDIN_CS}
spring.security.oauth2.client.registration.linkedin.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.scope=r_emailaddress, r_liteprofile
spring.security.oauth2.client.registration.linkedin.client-name=Linkedin

spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id
linkedin.email-address-uri=https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))
linkedin.profile-picture-uri=https://api.linkedin.com/v2/me?projection=(id,profilePicture(displayImage~:playableStreams))

spring.mail.host=smtp.zoho.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

spring.main.allow-circular-references=true
spring.main.allow-bean-definition-overriding=true

# metrics-start
management.endpoints.web.base-path=/api/actuator
management.endpoints.enabled-by-default=false
management.endpoint.prometheus.enabled=true
management.endpoints.web.exposure.include=prometheus
#metrics-end

app.auth.tokenSecret=${TOKEN_SECRET}
#token expiration time 10 days = 864000000 mils
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the Oauth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=${REDIRECT_URI}
logout.successRedirectUris=${LOGOUT_REDIRECT_URI}

logging.file.name=./logs/practicLog.log
logging.file.max-size=10MB
logging.file.max-history=7
logging.level.org.springframework=DEBUG


